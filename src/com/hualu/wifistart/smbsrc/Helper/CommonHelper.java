package com.hualu.wifistart.smbsrc.Helper;import java.io.IOException;import java.util.ArrayList;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import android.app.Activity;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.util.Log;public class CommonHelper {	static public String SUC = "success";	static public String FAL = "failed"; 	static public void openEX(String param){}		public static String pingHost(String str) {		String result = "";		try {			Process p = Runtime.getRuntime().exec("ping -c 1 -w 10 " + str);			int status = p.waitFor();			if (status == 0) {				result =  SUC;			} else {				result =  FAL;			}		} catch (IOException e) {		} catch (InterruptedException e) {		}		return result;	}		public static boolean isConnectDevice(Context context) {		return getLocalIpAddress(context).startsWith("10.10.1");	}		public static String getLocalIpAddress(Context context) {		//获取wifi服务        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);        //判断wifi是否开启        if (!wifiManager.isWifiEnabled()) {        wifiManager.setWifiEnabled(true);          }        WifiInfo wifiInfo = wifiManager.getConnectionInfo();             int ipAddress = wifiInfo.getIpAddress();         Log.i("ipaddress", intToIp(ipAddress));        return intToIp(ipAddress); 	}  	private static String intToIp(int i) {             return (i & 0xFF ) + "." +           ((i >> 8 ) & 0xFF) + "." +           ((i >> 16 ) & 0xFF) + "." +           ( i >> 24 & 0xFF) ;   } 		public static boolean isConnectInternet(Context context) {		ConnectivityManager cwjManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE); 		NetworkInfo info = cwjManager.getActiveNetworkInfo(); 		  if (info != null && info.isAvailable()){ 		       //do something 		       //能联网 		        return true; 		  }else{ 		       //do something 		       //不能联网 		        return false; 		  }	}		public static boolean isNetworkAvailable(Activity mActivity) {		Context context = mActivity.getApplicationContext();		ConnectivityManager connectivity = (ConnectivityManager) context				.getSystemService(Context.CONNECTIVITY_SERVICE);		if (connectivity == null) {			return false;		} else {			NetworkInfo[] info = connectivity.getAllNetworkInfo();			if (info != null) {				for (int i = 0; i < info.length; i++) {					if (info[i].getState() == NetworkInfo.State.CONNECTED) {						return true;					}				}			}		}		return false;	}		public void setVGA(){		HttpPost httpRequest=null; 	    List<NameValuePair> params=null; 	    HttpResponse httpResponse; 		httpRequest=new HttpPost("http://10.10.1.1/boafrm/formSysCmd");         params=new ArrayList<NameValuePair>();         params.add(new BasicNameValuePair("user","HAPPYCOW"));        params.add(new BasicNameValuePair("password","HAPPYCOW"));        params.add(new BasicNameValuePair("sysCmd","flash+set+UVC_RESOLUTION+320x240&apply=Apply&submit-url=%2Fsyscmd.htm"));        try {             httpRequest.setEntity(new UrlEncodedFormEntity(params,HTTP.UTF_8));             httpResponse=new DefaultHttpClient().execute(httpRequest);             if(httpResponse.getStatusLine().getStatusCode()==200){                EntityUtils.toString(httpResponse.getEntity());             }else{             }         } catch (Exception e) {         } 	}}